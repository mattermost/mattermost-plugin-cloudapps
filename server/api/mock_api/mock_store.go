// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-apps/server/api (interfaces: Store)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/mattermost/mattermost-plugin-apps/server/api"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteSub mocks base method
func (m *MockStore) DeleteSub(arg0 *api.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSub", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSub indicates an expected call of DeleteSub
func (mr *MockStoreMockRecorder) DeleteSub(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSub", reflect.TypeOf((*MockStore)(nil).DeleteSub), arg0)
}

// ListApps mocks base method
func (m *MockStore) ListApps() []*api.App {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApps")
	ret0, _ := ret[0].([]*api.App)
	return ret0
}

// ListApps indicates an expected call of ListApps
func (mr *MockStoreMockRecorder) ListApps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApps", reflect.TypeOf((*MockStore)(nil).ListApps))
}

// LoadApp mocks base method
func (m *MockStore) LoadApp(arg0 api.AppID) (*api.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadApp", arg0)
	ret0, _ := ret[0].(*api.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadApp indicates an expected call of LoadApp
func (mr *MockStoreMockRecorder) LoadApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadApp", reflect.TypeOf((*MockStore)(nil).LoadApp), arg0)
}

// LoadSubs mocks base method
func (m *MockStore) LoadSubs(arg0 api.Subject, arg1, arg2 string) ([]*api.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSubs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*api.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadSubs indicates an expected call of LoadSubs
func (mr *MockStoreMockRecorder) LoadSubs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSubs", reflect.TypeOf((*MockStore)(nil).LoadSubs), arg0, arg1, arg2)
}

// StoreApp mocks base method
func (m *MockStore) StoreApp(arg0 *api.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreApp", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreApp indicates an expected call of StoreApp
func (mr *MockStoreMockRecorder) StoreApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreApp", reflect.TypeOf((*MockStore)(nil).StoreApp), arg0)
}

// StoreSub mocks base method
func (m *MockStore) StoreSub(arg0 *api.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSub", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSub indicates an expected call of StoreSub
func (mr *MockStoreMockRecorder) StoreSub(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSub", reflect.TypeOf((*MockStore)(nil).StoreSub), arg0)
}
